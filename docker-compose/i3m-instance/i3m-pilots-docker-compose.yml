version: '3'
services:

#    dns-service:
#      image: defreitas/dns-proxy-server
#      container_name: dns-proxy-server
#      restart: unless-stopped
#      networks:
#        - i3m-net
#      volumes:
#         - /var/run/docker.sock:/var/run/docker.sock
#         - /etc/resolv.conf:/etc/resolv.conf
#      ports:
#         - 5380:5380
#      depends_on:
#        sdk-ri:
#            condition: service_healthy
#        web-ri:
#            condition: service_healthy

   backplane:
     container_name: backplane
     image: "95.211.3.251:8123/backplane:${BACKPLANE_VERSION}"
     restart: unless-stopped
     ports:
        - 3000:3000
     env_file: .env.backplane
     networks:
       - i3m-net
     healthcheck:
        test: "exit 0"
     
   tokenizer:
     build: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/wp3/t3.3/nodejs-tokenization-treasury-api.git#${TOKENIZER_VERSION}
     container_name: tokenizer
     ports:
        - 3001:3001
     env_file: .env.tokenizer
     restart: unless-stopped
#      environment:
#      PORT: ${PORT}
#        ETH_HOST: ${ETH_HOST}
#        CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
#        WEBHOOK: ${WEBHOOK}
     networks:
       - i3m-net
     depends_on:
       besu:
           condition: service_healthy
     command: npm start

   sdk-ri:
     build:
       context: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/sdk/i3m-sdk-reference-implementation.git#${SDKRI_VERSION}
       args:
          TEST: "-DskipTests"
          BACKPLANE_URL: ${BACKPLANE_URL}
          OIDC_URL: ${OIDC_URL}
          VC_URL: ${VC_URL}
          DATA_ACCESS_URL: ${DATA_ACCESS_URL}
     container_name: sdk-ref-impl
     image: "i3m/sdk-ref-impl:${SDKRI_VERSION}"
     restart: unless-stopped
     env_file: .env.sdk-ri
     ports:
        - 8181:8080
     networks:
       - i3m-net
     depends_on:
       backplane:
           condition: service_healthy  
     command: java -jar /usr/local/jetty/start.jar
     healthcheck:
        test: "exit 0"

   web-ri:
     build: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/web-ri/web-ri.git#${WEB_RI_VERSION}
     container_name: web-ri
     image: "i3m/web-ri:${WEB_RI_VERSION}"
     ports:
       - 5300:3000
     env_file: .env.web-ri
     restart: unless-stopped
     networks:
       - i3m-net
     depends_on:
       - mongo_web-ri 
     healthcheck:
       test: "exit 0"
       
   mongo_web-ri:
     image: mongo:${MONGO_WEBRI_VERSION}
     container_name: mongo_web-ri
     ports:
       - 27017:27017
     restart: unless-stopped
     env_file: .env.web-ri
     networks:
       - i3m-net
     command: --quiet --setParameter logLevel=0  

   openssl:
      image: ianayoung/openssl:${OPENSSL_VERSION}
      container_name: openssl
      networks:
        - i3m-net
      volumes:  
        - ./volumes/data/openssl/conf:/etc/ssl/certs
        - ./conf:/conf
      command: /bin/sh -c "openssl req -x509 -nodes -days 365 -subj "/C=CA/ST=QC/O=i3Market/CN=localhost" -addext "subjectAltName=DNS:localhost" -newkey rsa:2048 -keyout /etc/ssl/certs/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt"  
     
   nginx:
     image: nginx:${NGINX_VERSION}
     restart: unless-stopped
     container_name: nginx
     networks:
       - i3m-net
     depends_on:
       - openssl 
     volumes:
       - ./conf/nginx.conf:/etc/nginx/nginx.conf
       - ./conf/servers:/servers
       - ./volumes/data/openssl/conf:/etc/openssl/certs
     ports:
       - "443:443"
 
   oidc-provider-app:
#     build: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/wp3/t3.1-self-sovereign-identity-and-access-management/node-oidc-provider.git#${OIDC_VERSION}
     image: registry.gitlab.com/i3-market/code/wp3/t3.1-self-sovereign-identity-and-access-management/node-oidc-provider:${OIDC_VERSION}
     container_name: oidc-provider-app
     restart: unless-stopped
     networks:
       - i3m-net
#      environment:
#       OIDC_PROVIDER_DB_HOST: ${OIDC_PROVIDER_DB_HOST}
#       OIDC_PROVIDER_DB_PORT: ${OIDC_PROVIDER_DB_PORT}
#       OIDC_PROVIDER_DB_USERNAME: ${OIDC_PROVIDER_DB_USERNAME}
#       OIDC_PROVIDER_DB_PASSWORD: ${OIDC_PROVIDER_DB_PASSWORD}
#       OIDC_PROVIDER_DB_DATABASE: ${OIDC_PROVIDER_DB_DATABASE}
#       RPC_URL: ${RPC_URL}
#       WHITELIST: ${WHITELIST}
#       NODE_ENV: ${NODE_ENV}
#       REVERSE_PROXY: ${REVERSE_PROXY}
#       USE_NGROK: ${USE_NGROK}
#       JWKS_KEYS_PATH: ${JWKS_KEYS_PATH}
#       IDENTITY_PATH: ${IDENTITY_PATH}
     env_file: .env.oidc
     ports:
       - 3300:3300
     volumes:
      - ./volumes/misc:/app/misc
     depends_on:
      - oidc-provider-db

   oidc-provider-db:
     image: mongo:${OIDC_DB_VERSION}
     container_name: oidc-provider-db
     restart: unless-stopped
     networks:
      - i3m-net
     env_file: .env.oidc
#      environment:
#        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
#        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
#        MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
     ports:
       - 27019:27017
     volumes:
      - oidc-mongo:/data/db
      - ./oidc-initdata/scripts:/data/scripts
      - ./oidc-initdata/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
     command: --quiet --setParameter logLevel=0
   
   semantic-engine-service:
     container_name: "semantic-engine"
     image: registry.gitlab.com/i3-market/code/wp4/semantic-engine:${SEMANTIC_ENGINE_VERSION}
     ports:
       - 8082:8082
     env_file: .env.semantics
     restart: always
     networks:
       - i3m-net

   mongodb:
     image: mongo:${MONGO_VERSION}
     container_name: "semantic-engine-db"
     command: mongod --port 27018
     ports:
       - 27018:27018
     restart: always
     env_file: .env.semantics
     networks:
       - i3m-net

   vc:
#       build: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/wp3/t3.1-self-sovereign-identity-and-access-management/verifiable-credentials.git#${VC_VERSION}
     image: registry.gitlab.com/i3-market/code/wp3/t3.1-self-sovereign-identity-and-access-management/verifiable-credentials:${VC_VERSION}
     container_name: vc-service
     restart: unless-stopped
     ports:
       - 4200:4200
     networks:
       - i3m-net
     env_file: .env.vc
#       environment:
#         RPC_URL: ${RPC_URL}
#         WHITELIST: ${WHITELIST}
#         NODE_ENV: ${NODE_ENV}
#         REVERSE_PROXY: ${REVERSE_PROXY}
#         USE_NGROK: ${USE_NGROK}
#         JWKS_KEYS_PATH: ${JWKS_KEYS_PATH}
#         IDENTITY_PATH: ${IDENTITY_PATH}
#         CONTEXT_PATH: ${CONTEXT_PATH}
#         OIDC_PROVIDER_REVERSE_PROXY: ${CONTEXT_PATH}
     volumes:
        - ./volumes/misc:/app/misc

   data_access:
      container_name: data_access
      image: registry.gitlab.com/i3-market/code/sp2/express-datatransfermanagement:${DATA_ACCESS_VERSION}
#       build:
#           context: https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/i3-market/code/sp2/express-datatransfermanagement.git#NRP
#           args:
#             USER_ID: ${USER_ID-1000}
#             GROUP_ID: ${GROUP_ID-1000}
      restart: unless-stopped
      env_file: .env.data-access
#       environment:
#          NODE_ENV: ${NODE_ENV}
#          APP_NAME: ${APP_NAME}
#          NPM_SCRIPT: ${NPM_SCRIPT}
#       volumes:
#          - ./data_access/app:/app
      ports:
        - 3100:3000
        - 9229:9229
      depends_on:
         - mqtt-broker
      command: npm run start
      networks:
        - i3m-net

   mqtt-broker:
     image: iegomez/mosquitto-go-auth:${MQTT_VERSION}
     container_name: mqtt-broker
     networks:
       - i3m-net
     restart: unless-stopped
     volumes:
       - ./data_access/mqtt_conf/mosquitto/mosquitto:/etc/mosquitto/
     ports:
          - 1883:1883
          - 1884:1884
          - 9001:9001

   postgres:
     image: postgres:${POSTGRES_VERSION}
     container_name: postgres
     volumes:
       - ./keycloak-initdata/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
       - ./volumes/postgres/data:/var/lib/postgresql/data
     env_file: .env.keycloak
     restart: unless-stopped
#      environment:
#        - POSTGRES_MULTIPLE_DATABASES=
#        - POSTGRES_USER=postgres
#        - POSTGRES_PASSWORD=postgres
     ports:
       - 5432:5432
     networks:
       - i3m-net

   keycloak:
     image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
     env_file: .env.keycloak
     container_name: keycloak
     restart: unless-stopped
#      environment:
#        KEYCLOAK_USER: ${KEYCLOAK_USER}
#        KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
#        DB_ADDR: ${DB_ADDR}
#        DB_DATABASE: ${DB_DATABASE}
#        DB_USER: ${DB_USER}
#        DB_PASSWORD: ${DB_PASSWORD}
#        PROXY_ADDRESS_FORWARDING: ${PROXY_ADDRESS_FORWARDING}
     command: |
       bash -c "/common/wait-for-it.sh -t 60 postgres:5432 && /opt/jboss/tools/docker-entrypoint.sh"
     entrypoint: ""
     ports:
       - 8080:8080
       - 8443:8443
     # /opt/jboss/tools/docker-entrypoint.sh
     volumes:
       - ./keycloak-initdata/common:/common
     networks:
      - i3m-net
#      - reverse-proxy

   auditable-accounting:
      image: 95.211.3.251:8123/auditable-accounting:${AA_VERSION}
      container_name: auditable-accounting
      restart: unless-stopped
      env_file: .env.auditable-accounting
      networks:
        - i3m-net
      volumes:
        - ./volumes/cockroachdb/certs:/certs

   besu:
      image: 95.211.3.251:8123/besu-network:${BESU_VERSION}
      container_name: besu
      restart: unless-stopped
      env_file: .env.besu
      networks:
       - i3m-net
      volumes: ["/besu"]
      healthcheck:
        test: "exit 0"

#    nginx-reverse-proxy:

   cockroachdb:
      build:
        context: cockroachdb
        args:
          COCKROACHDB_VERSION: ${COCKROACHDB_VERSION}
      image: cockroachdb:${COCKROACHDB_VERSION}
      container_name: cockroachdb-node
      hostname: cockroachdb-node
      restart: unless-stopped
      networks:
        - i3m-net
      ports:
        - 26257:26257
        - 8085:8080  
      volumes:
        - ./cockroachdb/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        - ./volumes/cockroachdb/data:/cockroach/cockroach-data
        - ./volumes/cockroachdb/certs:/cockroach/certs
      command: start-single-node --advertise-addr=cockroachdb-node
    
   crs:
      image: 95.211.3.251:8123/crs:${CRS_VERSION}
      container_name: conflict-resolver-service
      restart: unless-stopped
      env_file: .env.conflict-resolver-service
      networks:
        - i3m-net
      volumes:
        - crs-keys:/app/.keys

networks:
  i3m-net:
volumes:
  oidc-mongo:
  semantic-engine-db:
  crs-keys:
